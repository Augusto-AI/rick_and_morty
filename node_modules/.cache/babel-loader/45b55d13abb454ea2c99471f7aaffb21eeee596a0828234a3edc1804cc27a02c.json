{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/rick_and_morty/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport Cards from './components/cards/Cards.jsx';\nimport Nav from './components/nav/Nav';\nimport axios from 'axios';\nimport { Routes, Route } from 'react-router-dom';\nimport Home from './components/home/Home';\nimport About from './components/about/About';\nimport Detail from './components/detail/Detail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [characters, setCharacters] = useState([]);\n  // Estado => characters = [{-}, {-}];\n\n  const example = {\n    id: 1,\n    name: 'Rick Sanchez',\n    status: 'Alive',\n    species: 'Human',\n    gender: 'Male',\n    origin: {\n      name: 'Earth (C-137)',\n      url: 'https://rickandmortyapi.com/api/location/1'\n    },\n    image: 'https://rickandmortyapi.com/api/character/avatar/1.jpeg'\n  };\n  const onSearch = id => {\n    // 2 => { id: 2 }\n    axios(`https://rickandmortyapi.com/api/character/${id}`).then(_ref => {\n      let {\n        data\n      } = _ref;\n      if (data.name) {\n        setCharacters(oldChars => [...oldChars, data]);\n      } else {\n        window.alert('¡No hay personajes con este ID!');\n      }\n    });\n  };\n  const onClose = id => {\n    setCharacters(characters.filter(caracter => caracter.id !== Number(id)));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/detail/:id\",\n        element: /*#__PURE__*/_jsxDEV(Detail, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/home\",\n        element: /*#__PURE__*/_jsxDEV(Cards, {\n          characters: characters,\n          onClose: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Cards, {\n      characters: characters,\n      onClose: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"XYOUpNAi+Jhs2dnEwppRANg7X2I=\");\n_c = App;\nexport default App;\n\n// Importa los componentes \"Routes\" y \"Route\" de react-router-dom en tu archivo App.js.\n// Luego, dirígete al archivo App.js. Ahora crearemos las rutas de los componentes. Cada componente debe renderizarse en las siguientes rutas:\n\n// Nav debe que aparecer en todas las rutas.\n// Cards debe aparecer solo en la ruta /home.\n// About debe aparecer solo en la ruta /about.\n// Detail debe aparecer solo en la ruta /detail/:id.\n// [NOTA]: ten en cuenta que la ruta del componente Detail recibe un parámetro id.\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Cards","Nav","axios","Routes","Route","Home","About","Detail","jsxDEV","_jsxDEV","App","_s","characters","setCharacters","example","id","name","status","species","gender","origin","url","image","onSearch","then","_ref","data","oldChars","window","alert","onClose","filter","caracter","Number","className","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/rick_and_morty/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport Cards from './components/cards/Cards.jsx';\nimport Nav from './components/nav/Nav';\nimport axios from 'axios';\nimport { Routes, Route } from 'react-router-dom';\nimport Home from './components/home/Home';\nimport About from './components/about/About';\nimport Detail from './components/detail/Detail';\n\n\nfunction App() {\n   const [characters, setCharacters] = useState([]);\n   // Estado => characters = [{-}, {-}];\n\n   const example = {\n      id: 1,\n      name: 'Rick Sanchez',\n      status: 'Alive',\n      species: 'Human',\n      gender: 'Male',\n      origin: {\n         name: 'Earth (C-137)',\n         url: 'https://rickandmortyapi.com/api/location/1',\n      },\n      image: 'https://rickandmortyapi.com/api/character/avatar/1.jpeg',\n   };\n\n   const onSearch = id => { // 2 => { id: 2 }\n      axios (`https://rickandmortyapi.com/api/character/${id}`)\n         .then(({ data }) => {\n            if (data.name) {\n               setCharacters((oldChars) => [...oldChars, data]);\n            } else {\n               window.alert('¡No hay personajes con este ID!');\n            }\n         });\n   }\n\n   const onClose = id => {\n      setCharacters(characters.filter(caracter =>\n         caracter.id !== Number(id)))\n   }\n\n   return (\n      <div className='App'>\n         <Nav onSearch={onSearch}/>\n         <hr />\n         <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/about\" element={<About />} />\n            <Route path=\"/detail/:id\" element={<Detail />} />\n            <Route path=\"/home\" element={<Cards characters={characters} onClose={onClose} />} />\n         </Routes>\n               <Cards characters={characters} onClose={onClose} />\n      </div>\n   );\n}\n\nexport default App;\n\n// Importa los componentes \"Routes\" y \"Route\" de react-router-dom en tu archivo App.js.\n// Luego, dirígete al archivo App.js. Ahora crearemos las rutas de los componentes. Cada componente debe renderizarse en las siguientes rutas:\n\n// Nav debe que aparecer en todas las rutas.\n// Cards debe aparecer solo en la ruta /home.\n// About debe aparecer solo en la ruta /about.\n// Detail debe aparecer solo en la ruta /detail/:id.\n// [NOTA]: ten en cuenta que la ruta del componente Detail recibe un parámetro id."],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}